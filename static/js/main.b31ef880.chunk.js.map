{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alerts.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","backgroundColor","caretColor","value","rows","onChange","event","target","newText","toUpperCase","showAlert","toLowerCase","area","document","getElementById","select","navigator","clipboard","writeText","Correct","textContent","split","join","length","Alerts","alert","wrd","word","charAt","slice","capitalize","msg","data-bs-dismiss","prototype","PropTypes","string","isRequired","about","defaultProps","App","Mode","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"qNAIe,SAASA,EAAOC,GAC7B,OACEC,EAAAC,EAAAC,cAAA,OACEC,UAAS,kCAAAC,OAAoCL,EAAMM,KAAI,QAAAD,OACtC,SAAfL,EAAMM,KAAkB,OAAS,UAGnCL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,KAC9BP,EAAMQ,OAETP,EAAAC,EAAAC,cAAA,UACEC,UAAU,iBACVK,KAAK,SACLC,iBAAe,WACfC,iBAAe,0BACfC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,qBAEXb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAElBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2BW,GAAG,0BAC3Cd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mCACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkBY,eAAa,OAAOT,KAAK,KAAG,SAI7DN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAiBhBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,mBACVK,KAAK,WACLQ,KAAK,SACLC,QAASlB,EAAMmB,WACfJ,GAAG,2BAELd,EAAAC,EAAAC,cAAA,SACEC,UAAS,yBAAAC,OACQ,SAAfL,EAAMM,KAAkB,QAAU,QAEpCc,QAAQ,0BAAwB,wBC5D/B,SAASC,EAASrB,GAC/B,IAmCEsB,EACsBC,mBAAS,mBAAkBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAA5CK,EAAIH,EAAA,GAAEI,EAAOJ,EAAA,GAEpB,OACEvB,EAAAC,EAAAC,cAAAF,EAAAC,EAAA2B,SAAA,KACE5B,EAAAC,EAAAC,cAAA,OACEC,UAAU,YACV0B,MAAO,CACLC,MAAsB,UAAf/B,EAAMM,KAAmB,QAAU,UAG5CL,EAAAC,EAAAC,cAAA,UAAKH,EAAMgC,SACX/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,YACE2B,MAAO,CACLG,gBAAgC,SAAfjC,EAAMM,KAAkB,UAAY,QACrDyB,MAAsB,UAAf/B,EAAMM,KAAmB,QAAU,QAC1C4B,WAAY,SAEd9B,UAAU,eACVW,GAAG,QACHoB,MAAOR,EACPS,KAAK,IACLC,SA1Ba,SAACC,GAEtBV,EAAQU,EAAMC,OAAOJ,WA2BjBlC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBc,QA7DzB,WAEpB,IAAIsB,EAAUb,EAAKc,cACnBb,EAAQY,GACRxC,EAAM0C,UAAU,8BAA+B,aAyDqB,wBAGhEzC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBc,QAtCzB,WAEpB,IAAIsB,EAAUb,EAAKgB,cACnBf,EAAQY,GACRxC,EAAM0C,UAAU,8BAA+B,aAkCqB,wBAGhEzC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBc,QA7D3B,WAGlBU,EADc,IAEd5B,EAAM0C,UAAU,eAAgB,aAyDkC,cAG9DzC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBc,QAnD5B,WACjB,IAAM0B,EAAOC,SAASC,eAAe,SAC/BnB,EAAOiB,EAAKT,MAClBS,EAAKG,SACLC,UAAUC,UAAUC,UAAUvB,GAC9B3B,EAAM0C,UAAU,cAAe,aA8CkC,aAG7DzC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuBc,QA7DrB,WACxB,IAEMiC,EAFON,SAASC,eAAe,SAASM,YACrBC,MAAM,QACHC,KAAK,KACjC1B,EAAQuB,GACRnD,EAAM0C,UAAU,uBAAwB,aAwDgC,wBAItEzC,EAAAC,EAAAC,cAAA,OACEC,UAAU,iBACV0B,MAAO,CACLC,MAAsB,UAAf/B,EAAMM,KAAmB,QAAU,UAG5CL,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,SACGwB,EAAK0B,MAAM,KAAKE,OAAM,cAAa5B,EAAK4B,OAAM,eAEjDtD,EAAAC,EAAAC,cAAA,SAAI,KAAQwB,EAAK0B,MAAM,KAAKE,OAAM,iBAClCtD,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SAAIwB,GAAc,mDC1FX,SAAS6B,EAAOxD,GAK7B,OACEA,EAAMyD,OACJxD,EAAAC,EAAAC,cAAA,OACEC,UAAS,eAAAC,OAAiBL,EAAMyD,MAAMhD,KAAI,gCAC1CQ,KAAK,SAELhB,EAAAC,EAAAC,cAAA,cAVa,SAACuD,GAClB,IAAMC,EAAOD,EAAIf,cACjB,OAAOgB,EAAKC,OAAO,GAAGnB,cAAgBkB,EAAKE,MAAM,GAQpCC,CAAW9D,EAAMyD,MAAMhD,OAAe,KAAGT,EAAMyD,MAAMM,IAC9D9D,EAAAC,EAAAC,cAAA,UACEM,KAAK,SACLL,UAAU,YACV4D,kBAAgB,QAChBlD,aAAW,WFuDrBf,EAAOkE,UAAY,CACjBzD,MAAO0D,IAAUC,OAAOC,WACxBC,MAAOH,IAAUC,OAAOC,YAG1BrE,EAAOuE,aAAe,CACpB9D,MAAO,iBACP6D,MAAO,SGxBME,MAhDf,WAAe,IAAAjD,EACWC,mBAAS,SAAQC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAlCkD,EAAIhD,EAAA,GAAEiD,EAAOjD,EAAA,GAAAkD,EACMnD,mBAAS,MAAKoD,EAAAlD,OAAAC,EAAA,EAAAD,CAAAiD,EAAA,GAAjCjB,EAAKkB,EAAA,GAAEC,EAAQD,EAAA,GAChBjC,EAAY,SAACmC,EAASpE,GAC1BmE,EAAS,CACPb,IAAKc,EACLpE,KAAMA,IAERqE,WAAW,WACTF,EAAS,OACR,OAaL,OACE3E,EAAAC,EAAAC,cAAAF,EAAAC,EAAA2B,SAAA,KAEE5B,EAAAC,EAAAC,cAACJ,EAAM,CAACS,MAAM,YAAYF,KAAMkE,EAAMrD,WAdvB,WACJ,UAATqD,GACFC,EAAQ,QACR5B,SAASkC,KAAKjD,MAAMG,gBAAkB,OACtCS,EAAU,6BAA8B,aAExC+B,EAAQ,SACR5B,SAASkC,KAAKjD,MAAMG,gBAAkB,QACtCS,EAAU,8BAA+B,eAOzCzC,EAAAC,EAAAC,cAACqD,EAAM,CAACC,MAAOA,IACfxD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAKbH,EAAAC,EAAAC,cAACkB,EAAQ,CACPW,QAAQ,kCACR1B,KAAMkE,EACN9B,UAAWA,OChCNsC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWjD,SAASC,eAAe,SACpDiD,OACH9F,EAAAC,EAAAC,cAACF,EAAAC,EAAM8F,WAAU,KACf/F,EAAAC,EAAAC,cAAC8F,EAAG,QAORjB","file":"static/js/main.b31ef880.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${\r\n        props.mode === \"dark\" ? \"dark\" : \"light\"\r\n      }`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link\" to=\"/about\">\r\n                {props.about}\r\n              </Link> */}\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div className=\"form-check form-switch\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              onClick={props.toggleMode}\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className={`form-check-label text-${\r\n                props.mode === \"dark\" ? \"light\" : \"dark\"\r\n              }`}\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.prototype = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Title Here\",\r\n  about: \"About\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"UpperCase was clicked!\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Text converted to uppercase\", \"success\");\r\n  };\r\n  const handleClear = () => {\r\n    // console.log(\"UpperCase was clicked!\");\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text cleared\", \"success\");\r\n  };\r\n  const handleExtraSpaces = () => {\r\n    const area = document.getElementById(\"myBox\").textContent;\r\n    const halfCorrect = area.split(/[ ]+/);\r\n    const Correct = halfCorrect.join(\" \");\r\n    setText(Correct);\r\n    props.showAlert(\"Extra Spaces Removed\", \"success\");\r\n  };\r\n  const handleCopy = () => {\r\n    const area = document.getElementById(\"myBox\");\r\n    const text = area.value;\r\n    area.select();\r\n    navigator.clipboard.writeText(text);\r\n    props.showAlert(\"Text Copied\", \"success\");\r\n  };\r\n  const handleLoClick = () => {\r\n    // console.log(\"UpperCase was clicked!\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Text converted to Lowercase\", \"success\");\r\n  };\r\n  const handleUpChange = (event) => {\r\n    // console.log(\"Change was clicked!\");\r\n    setText(event.target.value);\r\n  };\r\n  const [text, setText] = useState(\"Enter text here\");\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          color: props.mode === \"light\" ? \"black\" : \"white\",\r\n        }}\r\n      >\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"#686161\" : \"white\",\r\n              color: props.mode === \"light\" ? \"black\" : \"white\",\r\n              caretColor: \"white\",\r\n            }}\r\n            className=\"form-control\"\r\n            id=\"myBox\"\r\n            value={text}\r\n            rows=\"8\"\r\n            onChange={handleUpChange}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleClear}>\r\n          Clear Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>\r\n          Copy Text\r\n        </button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>\r\n          Remove Extra Spaces\r\n        </button>\r\n      </div>\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{\r\n          color: props.mode === \"light\" ? \"black\" : \"white\",\r\n        }}\r\n      >\r\n        <h2>Your Text Summary</h2>\r\n        <p>\r\n          {text.split(\" \").length} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text ? text : \"Write something in textarea to preview here!!\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alerts(props) {\r\n  const capitalize = (wrd) => {\r\n    const word = wrd.toLowerCase();\r\n    return word.charAt(0).toUpperCase() + word.slice(1);\r\n  };\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","import \"./App.css\";\nimport React, { useState } from \"react\";\n// import About from \"./Components/About\";\nimport Navbar from \"./Components/Navbar\";\nimport TextForm from \"./Components/TextForm\";\nimport Alerts from \"./Components/Alerts\";\n// import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [Mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  const toggleMode = () => {\n    if (Mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  };\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={Mode} toggleMode={toggleMode} />\n      <Alerts alert={alert} />\n      <div className=\"container my-3\">\n        {/* <Routes> */}\n        {/* <Route */}\n        {/* path=\"/\"\n              element={ */}\n        <TextForm\n          heading=\"Enter the text to analyze below\"\n          mode={Mode}\n          showAlert={showAlert}\n        />\n        {/* } */}\n        {/* />\n            <Route exact path=\"/about\" element={<About />} />\n          </Routes> */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}